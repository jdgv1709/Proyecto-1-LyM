/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi

Juan Galan
Camilo Rey
 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;



@SuppressWarnings("serial")
public class Robot 
{
	//ArrayList <String> variables = new ArrayList <String> ();
	HashMap<String, Integer> variables = new HashMap<>();
    ArrayList <String> funciones = new ArrayList <String> ();
 	ArrayList <String> funciones_parametros = new ArrayList <String> ();

	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: {
  < EXEC:"EXEC" >
| < NEW:"new" >
}

TOKEN: {
  < VAR:"var" >
| < MACRO:"macro" >
| < IGUAL:"=" >
}

TOKEN: {
  < LBRACKET:"{" >
| < RBRACKET:"}" >
| < LPARENTESIS:"(" >
| < RPARENTESIS:")">
| < COMMA:"," > }

TOKEN: {
  < RIGHT:"RIGHT" >
| < LEFT:"LEFT" >
| < BACK:"BACK" >
| < FRONT:"FRONT">
| < NORTH:"NORTH" >
| < SOUTH:"SOUTH" >
| < EAST:"EAST" >
| < WEST:"WEST" >
| < FORWARD:"FORWARD" >
| < BACKWARD:"BACKWARD" >
	}

TOKEN: /* Nombres de Comandos */
{

			<TURNTOMY:  "turnToMy">
		| 	<TURNTOTHE: "turnToThe">
		| 	<WALK: "WALK">
		| 	<JUMP: "JUMP">
		|  < POP: "Pop" >
		|  <DROP: "DROP" >
        |  < PICK:  "PICK" >
        | < GRAB:"GRAB" >
        | < LETGO:"letGo" >
        | < MOVES:"MOVES">
        | < NOP:"NOP" >
        | < SAFEEXE:"safeExe" >	

}

TOKEN:
{
		<BALLOONS:  "myBALLOONS" >
		| <CHIPS:  "myCHIPS"  >
		| <SIZE:"SIZE" >
		| < MYX:"MYX" >
		| < MYY:"MYY" >
		| < BALLONSHERE:"ballonsHere" >
		| < CHIPSHERE:"chipsHere" >
		| < ROOM:"roomForChips" >

}

TOKEN:
{
  < IF:"IF" >
| < THEN:"THEN" >
| < ELSE:"ELSE" >
| < FI:"FI" >
| < DO:"DO" >
| < OD:"OD" >
| < REP:"REP" >
| < TIMES:"TIMES" >
| < PER:"PER" >
}

TOKEN:
{
  < BLOCKED:"isBlocked?" >
| < FACING:"isFacing?" >
| < ZERO:"zero?" >
| < NOT:"NOT" >
}

TOKEN: {
  < SEMICOLON:";" >
}

TOKEN :
{
  < LETTERS : (<LETTER>)+ >
| < #LETTER : ["a"-"z", "A"-"Z"] > 
}


TOKEN :
{
		<NUM: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
        
}

//PARSER
void variable_definition() : //Funciona definicion y uso de variables
{
  Token variableName=null;
  Token numero=null;
}
{
    < NEW > < VAR > variableName = < LETTERS > < IGUAL > numero= < NUM >
  {
    variables.put(variableName.image, Integer.parseInt(numero.image));
    System.out.println("Variable " + variableName.image + " set to " + numero.image);
  }

}

void turn_To_My():
{
}
{<TURNTOMY>  "("(
			< RIGHT > { world.turnRight();salida = "Command: turn to my right ";}  
	    | < BACK > { world.turnRight(); world.turnRight();salida = "Command: turn to my back ";}
	    | < LEFT > { world.turnRight(); world.turnRight();world.turnRight();salida = "Command: turn to my left ";}
	    ) ")"{ System.out.println(salida);}
	    
}

void turn_To_The():
{
}
{
    <TURNTOTHE> "("
    (
        <NORTH> 
        {
            // Check if the robot is already facing north
            if (world.facingNorth()) {
                salida = "Already facing north, no need to turn.";
            } else {
                // Keep turning right until facing north
                while (!world.facingNorth()) {
                    world.turnRight();
                    salida = "Turning right to face north...";
                    System.out.println(salida);
                }
                salida = "Now facing north.";
            }
            System.out.println(salida);
        }
  | < SOUTH >
  {
            // Check if the robot is already facing north
            if (world.facingSouth()) {
                salida = "Already facing south, no need to turn.";
            } else {
                // Keep turning right until facing north
                while (!world.facingSouth()) {
                    world.turnRight();
                    salida = "Turning right to face south...";
                    System.out.println(salida);
                }
                salida = "Now facing south.";
            }
            System.out.println(salida);
        }
| < EAST >
{
            // Check if the robot is already facing north
            if (world.facingEast()) {
                salida = "Already facing east, no need to turn.";
            } else {
                // Keep turning right until facing north
                while (!world.facingEast()) {
                    world.turnRight();
                    salida = "Turning right to face east...";
                    System.out.println(salida);
                }
                salida = "Now facing east.";
            }
            System.out.println(salida);
        } 
|< WEST >
{
            // Check if the robot is already facing north
            if (world.facingWest()) {
                salida = "Already facing west, no need to turn.";
            } else {
                // Keep turning right until facing north
                while (!world.facingWest()) {
                    world.turnRight();
                    salida = "Turning right to face west...";
                    System.out.println(salida);
                }
                salida = "Now facing west.";
            }
            System.out.println(salida);
        } 
)
    ")"
}


void caminar() : //Usar como base para comandos que puedan recibir numeros o variables
{
    int x;
    Token varName;  // Token to store the variable name
}
{
    <WALK> "("
    (
        x = num()  // Accept a number
    |
        varName = <LETTERS>  // Accept a variable name
        {
            if (variables.containsKey(varName.image)) {
                x = variables.get(varName.image);  // Retrieve the value from the HashMap
            } else {
                System.out.println("Error: Variable " + varName.image + " not defined.");
                throw new ParseException();  // Throw an exception if the variable doesn't exist
            }
        }
    )
    ")" 
    {
        world.moveForward(x, false);  // Use the value (whether number or from variable)
        salida = "Command: Moveforward " + x;
        System.out.println(salida);
    }
}

void jump() :
{
    int x;
    Token varName;  // Token to store the variable name
}
{
    <JUMP> "("
    (
        x = num()  // Accept a number
    |
        varName = <LETTERS>  // Accept a variable name
        {
            if (variables.containsKey(varName.image)) {
                x = variables.get(varName.image);  // Retrieve the value from the HashMap
            } else {
                System.out.println("Error: Variable " + varName.image + " not defined.");
                throw new ParseException();  // Throw an exception if the variable doesn't exist
            }
        }
    )
    ")" 
    {
        world.moveForward(x, true); 
        salida = "Command: jump forward " + x;
        System.out.println(salida);
    }
}

void drop() :
{
    int x;
    Token varName;  // Token to store the variable name
}
{
    <DROP> "("
    (
        x = num()  // Accept a number
    |
        varName = <LETTERS>  // Accept a variable name
        {
            if (variables.containsKey(varName.image)) {
                x = variables.get(varName.image);  // Retrieve the value from the HashMap
            } else {
                System.out.println("Error: Variable " + varName.image + " not defined.");
                throw new ParseException();  // Throw an exception if the variable doesn't exist
            }
        }
    )
    ")" 
    {
        {world.putChips(x); salida = "Comando:  Drop " + x;} 
        System.out.println(salida);
    }
}

void pick() :
{
    int x;
    Token varName;  // Token to store the variable name
}
{
    <PICK> "("
    (
        x = num()  // Accept a number
    |
        varName = <LETTERS>  // Accept a variable name
        {
            if (variables.containsKey(varName.image)) {
                x = variables.get(varName.image);  // Retrieve the value from the HashMap
            } else {
                System.out.println("Error: Variable " + varName.image + " not defined.");
                throw new ParseException();  // Throw an exception if the variable doesn't exist
            }
        }
    )
    ")" 
    {
        {world.pickupChip(); salida = "Comando:  Pick " + x;} 
        System.out.println(salida);
    }
}

void grab() :
{
    int x;
    Token varName;  // Token to store the variable name
}
{
    <GRAB> "("
    (
        x = num()  // Accept a number
    |
        varName = <LETTERS>  // Accept a variable name
        {
            if (variables.containsKey(varName.image)) {
                x = variables.get(varName.image);  // Retrieve the value from the HashMap
            } else {
                System.out.println("Error: Variable " + varName.image + " not defined.");
                throw new ParseException();  // Throw an exception if the variable doesn't exist
            }
        }
    )
    ")" 
    {
        {world.pickupBalloon(); salida = "Comando:  Grab " + x;}
        System.out.println(salida);
    }
}

void letgo() :
{
    int x;
    Token varName;  // Token to store the variable name
}
{
    <LETGO> "("
    (
        x = num()  // Accept a number
    |
        varName = <LETTERS>  // Accept a variable name
        {
            if (variables.containsKey(varName.image)) {
                x = variables.get(varName.image);  // Retrieve the value from the HashMap
            } else {
                System.out.println("Error: Variable " + varName.image + " not defined.");
                throw new ParseException();  // Throw an exception if the variable doesn't exist
            }
        }
    )
    ")" 
    {
        {world.putBalloon(); salida = "Comando:  LetGo " + x;} 
        System.out.println(salida);
    }
}

void pop() :
{
    int x;
    Token varName;  // Token to store the variable name
}
{
    <POP> "("
    (
        x = num()  // Accept a number
    |
        varName = <LETTERS>  // Accept a variable name
        {
            if (variables.containsKey(varName.image)) {
                x = variables.get(varName.image);  // Retrieve the value from the HashMap
            } else {
                System.out.println("Error: Variable " + varName.image + " not defined.");
                throw new ParseException();  // Throw an exception if the variable doesn't exist
            }
        }
    )
    ")" 
    {
        {world.popBalloon(); salida = "Comando:  POP " + x;} 
        System.out.println(salida);
    }
}

void moves() :
{
    Token direction;
}
{
    <MOVES> "("
    // Handle the first direction (required)
    direction = move_direction()
    {
        salida = "Command: Move " + direction.image;
        System.out.println(salida);
    } //TODO Hacer que funcione mas del primer elemento de la secuencia
    // Handle any subsequent directions (optional, separated by commas)
    ( "," direction = move_direction()
    {
        salida = "Command: Move " + direction.image;
        System.out.println(salida);
    } )*
    ")"
}

Token move_direction() :
{
    Token t = null;
}
{
    t = <RIGHT> { world.right(); } 
    | <LEFT> { world.left(); }
    | <BACKWARD> { world.down(); } 
    | <FORWARD> { world.up(); }
    { return t; } // Ensures that t is always returned
}

void safeexe():
{
}
{
  < SAFEEXE > "(" sequence() ")"
}

// Values

void size():
{ int dim;
}
{
    < SIZE > { dim=world.getN(); System.out.println(dim);variables.put("siz", dim);
    System.out.println("saved "+ dim+ " as variable: siz");} 
    
}

void myx():
{Point x;
}
{
  < MYX > {x=world.getPosition();System.out.println(x.x); variables.put("posx", x.x);
  System.out.println("saved "+ x.x+ " as variable: posx");}
}

void myy():
{Point y;
}
{
  < MYY > {y=world.getPosition();System.out.println(y.y); variables.put("posy", y.y);
  System.out.println("saved "+ y.y+ " as variable: posy");}
}

void mychips():
{int c;
}
{
  <CHIPS > {c=world.getMyChips();System.out.println(c);variables.put("chip", c);
  System.out.println("saved "+ c+ " as variable: chip");}
}

void myballoons():
{
  int g; }
 {
	<BALLOONS> {g=world.getMyBalloons();System.out.println(g);variables.put("bal", g);
	System.out.println("saved "+ g+ " as variable: bal");}
   }

void balloonshere():
{int b;
}
{
  < BALLONSHERE >{b=world.countBalloons();System.out.println(b);variables.put("balhere", b);
  System.out.println("saved "+ b+ " as variable: balhere");}
}

void chipshere():
{boolean b;
}
{
  < CHIPSHERE >{b=world.chipExists();int intValue = b ? 1 : 0; System.out.println(intValue);variables.put("chiphere", intValue);
  System.out.println("saved "+ intValue+ " as variable: chiphere");}
}

void room():
{int c;
}
{
  <ROOM> {c=world.getMyChips();System.out.println(c);variables.put("rom", c);System.out.println("saved "+ c+ " as variable: rom");}
}

//Condiciones

 /*void isblocked():
{Token direction=null;
}
{< BLOCKED >"("
    direction = face_direction() ")"
  
}

Token face_direction() :
{
    Token t = null;
}
{
    t = <RIGHT> { world.right(); } 
    | <LEFT> { world.left(); }
    | <BACK> { world.down(); } 
    | <FRONT> { world.up(); }
    { return t; } // Ensures that t is always returned
}*/ //TODO: REVISAR COMO HACER ISBLOCKED QUE DEPENDE DE LA ORIENTACIÓN

boolean isfacing():
{boolean cond;
}
{
    <FACING> "("
    (
        <NORTH> 
        {cond=world.facingNorth();System.out.println(cond);}
  | < SOUTH >
  {cond=world.facingSouth();System.out.println(cond); }
| < EAST >
{cond=world.facingEast();System.out.println(cond); }
|< WEST >
{cond=world.facingWest();System.out.println(cond); }
)
    ")"
    { return cond;}
}

boolean checkZero() :
{
    Token token = null;
    int value = 0;
}
{
    <ZERO> "("
    (
        token = <NUM>
        {
            // Convert the NUM token's value to an integer and assign it to value
            value = Integer.parseInt(token.image);
        }
    |
        token = <LETTERS>
        {
            // Look up the LETTERS token in the hashmap "variables"
            if (variables.containsKey(token.image)) {
                value = variables.get(token.image); // Get the value from the hashmap
            } else {
                System.out.println("Error: Variable " + token.image + " is not defined.");
                // You can throw an exception here if necessary
            }
        }
    )")"
    { System.out.println(value == 0); }
    {
        // Check if the value is zero and return true or false
        return value == 0;
    }
}

boolean not() :
{
    boolean result;
}
{ < NOT >
    "(" (result = isfacing()
  | result=checkZero() //TODO: Agregar isblocking
  | result=not()) ")" 
    { System.out.println(!result + " :Resultado Final");}
    {
        return !result; // Negate the result of conditions() and return it
    }
    
}

void repeat() :
{
    int repeatCount = 0;
    Token variableName = null;
}
{
    <REP> (
        // First case: a constant number
        <NUM> { 
            repeatCount = Integer.parseInt(token.image); 
        }
    |   // Second case: a variable
        <LETTERS> { 
            variableName = token;
            if (variables.containsKey(variableName.image)) {
                repeatCount = variables.get(variableName.image); // Get the value from HashMap
            } else {
                System.out.println("Error: Variable " + variableName.image + " is not defined.");
                throw new ParseException("Undefined variable: " + variableName.image);
            }
        }
    )
    <TIMES> sequence() < PER > // Now expecting a TIMES token
    } 

//TODO: eSTRUCTURAS DE CONTROL + FUNCIONES
void sequence() : //Ejecutables: usar para def funciones, repeat
{
}
{
	(caminar()
		| variable_definition()
		| turn_To_My()
		| turn_To_The()
		| jump()
		| drop()
		| pick()
		| grab()
		| letgo()
		| pop()
		| < NOP >
		| moves()
		| safeexe()
		| size()
		| myx()
		| myy()
		| mychips()
		| myballoons()
		| balloonshere()
		| chipshere()
		| room()
		| repeat()
  )+
}


void ejecutables():
{
}
{
  < EXEC > "{" (
	(	  caminar()
		| turn_To_My()
		| turn_To_The()
		| jump()
		| drop()
		| pick()
		| grab()
		| letgo()
		| pop()
		| < NOP >
		| moves()
		| safeexe()
		| size()
		| myx()
		| myy()
		| mychips()
		| myballoons()
		| balloonshere()
		| chipshere()
		| room()

    )";")+ "}"
}


//Hacer un void con todos los ejecutables para determinar donde va el EXEC
	boolean command(Console sistema): //Aqui toca meter todos los voids, y los exec donde toque
	{	
		
		int x,y;
		Token variableName=null;
		salida=new String();	
	}

	
	{
		(		(
		(		  
		// < EXEC >"{" caminar() "}"
		variable_definition()
		/*| turn_To_My()
		| turn_To_The()
		| jump()
		| drop()
		| pick()
		| grab()
		| letgo()
		| pop()
		| < NOP >
		| moves()
		| safeexe()
		| size()
		| myx()
		| myy()
		| mychips()
		| myballoons()
		| balloonshere()
		| chipshere()
		| room()
		*/
 		| ejecutables()
		| not()
		| repeat()
				 

		) //TOCA AGREGAR LOS VOIDS DENTRO DE UN BOOLEAN

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;}) 
	}


	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

	